<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ICONIXプロセス on ともえーぬのブログ</title>
    <link>https://tomoeine.github.io/tags/iconix%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9/</link>
    <description>Recent content in ICONIXプロセス on ともえーぬのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 17 Apr 2021 08:29:47 +0900</lastBuildDate><atom:link href="https://tomoeine.github.io/tags/iconix%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ICONIXプロセスを（途中まで）実践してみた</title>
      <link>https://tomoeine.github.io/2021/04/software-design-miyazaki-202104/</link>
      <pubDate>Sat, 17 Apr 2021 08:29:47 +0900</pubDate>
      
      <guid>https://tomoeine.github.io/2021/04/software-design-miyazaki-202104/</guid>
      <description>目次  目次 はじめに 序文 ICONIXプロセスの実践  モデルを洗い出す ユースケース図を書く ユースケース記述を書く ロバストネス図を書く  まとめ・感想 おわりに  はじめに この記事は、とあるプチ勉強会の中で、演習的に ICONIXプロセス を実践してみた記録です。
ICONIXプロセス・ユースケース駆動開発について学びたい方は ユースケース駆動開発実践ガイド をぜひ読んでみてください。
ざっくり概要を知りたい方は、よろしければ以下の記事もご活用ください。
https://zenn.dev/tomoeine/articles/2babb554aa0478
序文 きっかけは、宮崎のコワーキングスペース ATOMica で作業していたとある日のこと。
その日は、誕生日プレゼントとしていただいたばかりの「ユースケース駆動開発実践ガイド」を傍らに置いて作業していました。（Nさんありがとうございます！）

そこに通りがかった宮崎を代表するつよつよエンジニアEさんが「こういうテーマのプチ勉強会したいよね」と。
これはやるしかない！
ということで宮崎IT関連勉強会の Slack で参加者を募り、勉強会開催に漕ぎ着けたのでした。
第1回は、私が本を読んだアウトプットとして書いた 前段のまとめ記事 を話の入口にしつつ、Eさん＆Kさんがどんどん話を拡げてくださり、ICONIXプロセスに加えてテスト駆動やDDDの話を「なるほど、なるほど」とお勉強させていただきました。
そして、本記事本題の第2回。
5人が集まりました。
今回はざっくり、「実際に何か手を動かしたいよね〜」と話していましたが、ノーテーマ。
その場で案を募ったところ、Iさんから「居酒屋のボトルキープを管理するアプリという以前からのアイデアがあるんだけどどう？」とご提案が。 そこで、前回同様Eさん＆Kさんに講師をしていただきながら、IさんをドメインエキスパートとしてICONIXプロセスを進めてみる会となったのでした。
ICONIXプロセスの実践 さあ、ここからがこの記事の本題です。
モデルを洗い出す まずはドメインエキスパートのIさんに、ざっくりとした要求をヒアリングします
要求 1 2 3  お客さんが居酒屋やスナックに行き、ボトルキープしたらそれを記録する。 お客さんは後でキープしたボトルを確認する。 お店側も、誰がどのボトルをキープしたか確認する。   この要求を元に、以下のモデルを洗い出しました。
この時点ではのモデルはドラフト版で、後で修正します。
 restaurant(居酒屋やスナックの店舗) customer(ボトルキープするお客さん) kept_bottle(キープされたボトル)  ここで洗い出したモデルは、後のフェーズでもずっと使う「用語集」にもなります（DDDで言う「ユビキタス言語」）。
ユースケース図を書く ユースケース駆動開発実践ガイドの中では「ユースケース記述の書き方」を中心に説明されていますが、これは各ユースケースを詳細に説明するためのもの ユースケースを洗い出すために、まずはユースケース図を作ります。
ユースケース作成にあたり、さらに詳しく要求を洗い出していきます。</description>
    </item>
    
  </channel>
</rss>
